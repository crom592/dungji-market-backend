# Generated by Django 5.1.4 on 2025-02-19 05:50

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("buyer", "구매자"), ("seller", "판매자"), ("admin", "관리자")],
                        default="buyer",
                        max_length=10,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=15, null=True, unique=True),
                ),
                ("profile_image", models.URLField(blank=True)),
                (
                    "business_reg_number",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("is_business_verified", models.BooleanField(default=False)),
                ("penalty_expiry", models.DateTimeField(blank=True, null=True)),
                ("penalty_count", models.PositiveIntegerField(default=0)),
                ("current_penalty_level", models.PositiveSmallIntegerField(default=0)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="custom_user_set",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="custom_user_set",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Badge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("level", models.CharField(max_length=50)),
                ("icon", models.ImageField(upload_to="badges/")),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="badges",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("slug", models.SlugField(null=True, unique=True)),
                ("is_service", models.BooleanField(default=False)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.category",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GroupBuy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("min_participants", models.PositiveSmallIntegerField(default=2)),
                ("max_participants", models.PositiveSmallIntegerField(default=5)),
                ("start_time", models.DateTimeField(auto_now_add=True)),
                ("end_time", models.DateTimeField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("recruiting", "모집중"),
                            ("bidding", "입찰진행중"),
                            ("voting", "최종선택중"),
                            ("seller_confirmation", "판매자확정대기"),
                            ("completed", "완료"),
                            ("cancelled", "취소됨"),
                        ],
                        default="recruiting",
                        max_length=20,
                    ),
                ),
                ("current_participants", models.PositiveIntegerField(default=0)),
                ("voting_end", models.DateTimeField(blank=True, null=True)),
                ("target_price", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "creator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_groupbuys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Bid",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "bid_type",
                    models.CharField(
                        choices=[("price", "가격입찰"), ("support", "지원금입찰")],
                        default="price",
                        max_length=10,
                    ),
                ),
                ("amount", models.PositiveIntegerField(default=0)),
                (
                    "contract_period",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_selected", models.BooleanField(default=False)),
                (
                    "seller",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "groupbuy",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.groupbuy",
                    ),
                ),
            ],
            options={
                "ordering": [
                    models.Case(
                        models.When(bid_type="price", then="amount"),
                        models.When(
                            bid_type="support",
                            then=django.db.models.expressions.CombinedExpression(
                                models.F("amount"), "*", models.Value(-1)
                            ),
                        ),
                        output_field=models.IntegerField(),
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_read", models.BooleanField(default=False)),
                (
                    "groupbuy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.groupbuy"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Participation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("is_leader", models.BooleanField(default=False)),
                ("is_locked", models.BooleanField(default=False)),
                (
                    "groupbuy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.groupbuy"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="groupbuy",
            name="participants",
            field=models.ManyToManyField(
                related_name="joined_groupbuys",
                through="api.Participation",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Penalty",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.TextField()),
                ("penalty_type", models.CharField(max_length=20)),
                ("start_date", models.DateTimeField(default=django.utils.timezone.now)),
                ("end_date", models.DateTimeField()),
                ("is_active", models.BooleanField(default=True)),
                ("count", models.PositiveSmallIntegerField(default=1)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("slug", models.SlugField(unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "product_type",
                    models.CharField(
                        choices=[("device", "기기"), ("service", "통신/서비스")], max_length=10
                    ),
                ),
                ("base_price", models.PositiveIntegerField()),
                ("image_url", models.URLField()),
                ("is_available", models.BooleanField(default=True)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.category"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="groupbuy",
            name="product",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.PROTECT, to="api.product"
            ),
        ),
        migrations.CreateModel(
            name="Vote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "choice",
                    models.CharField(
                        choices=[("confirm", "확정"), ("cancel", "포기")], max_length=10
                    ),
                ),
                ("voted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "participation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.participation",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.UniqueConstraint(
                fields=("username", "phone_number"), name="unique_user_identity"
            ),
        ),
        migrations.AddConstraint(
            model_name="bid",
            constraint=models.UniqueConstraint(
                fields=("groupbuy", "seller"), name="unique_bid_per_seller"
            ),
        ),
        migrations.AddConstraint(
            model_name="participation",
            constraint=models.UniqueConstraint(
                fields=("user", "groupbuy"), name="unique_participation"
            ),
        ),
        migrations.AddConstraint(
            model_name="penalty",
            constraint=models.UniqueConstraint(
                fields=("user", "penalty_type"), name="unique_penalty"
            ),
        ),
        migrations.AddIndex(
            model_name="groupbuy",
            index=models.Index(
                fields=["status", "end_time"], name="api_groupbu_status_c83532_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="groupbuy",
            constraint=models.UniqueConstraint(
                fields=("product", "creator"), name="unique_groupbuy_per_product"
            ),
        ),
    ]
